name: Build OpenWrt Packages and Create Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  generate_matrix:
    name: Set matrix
    runs-on: ubuntu-latest
    outputs:
      sdks: ${{ steps.out.outputs.sdks }}
    strategy:
      matrix:
        ref:
          - main
          - openwrt-21.02
          - openwrt-22.03
          - openwrt-23.05
          - openwrt-24.10
    steps:
      - name: Checkout OpenWrt
        uses: actions/checkout@v4
        with:
          repository: openwrt/openwrt
          ref: ${{ matrix.ref }}

      - name: Set targets
        id: find_targets
        run: |
          REF=${{ matrix.ref }}

          # Fetch architectures using dump-target-info.pl
          JSON='['
          FIRST=1

          while read -r line;
          do
            ARCH=$(echo "$line" | cut -d " " -f 1)

            [[ $FIRST -ne 1 ]] && JSON="$JSON"','
            FIRST=0

            JSON="$JSON"'{"arch":"'"$ARCH"'","ref":"'"$REF"'"}'
          done <<< $(perl ./scripts/dump-target-info.pl architectures 2>/dev/null)

          JSON="$JSON"']'
          echo -e "\n---- sdks ----\n"
          echo "$JSON"
          echo -e "\n---- sdks ----\n"
          echo "sdks=$JSON" >> "$GITHUB_OUTPUT"

      - uses: cloudposse/github-action-matrix-outputs-write@main
        id: out
        with:
          matrix-step-name: ${{ github.job }}
          matrix-key: ${{ matrix.ref }}
          outputs: |-
            sdks: ${{ steps.find_targets.outputs.sdks }}

  gather_matrix:
    name: Gather build matrices
    runs-on: ubuntu-latest
    needs: generate_matrix
    outputs:
      result: ${{ steps.gather.outputs.result }}
    steps:
      - uses: cloudposse/github-action-matrix-outputs-read@main
        id: read
        with:
          matrix-step-name: generate_matrix

      - name: Gather matrices
        id: gather
        run: |
          result=$(jq -c '.sdks[]' <<< '${{ steps.read.outputs.result }}' | jq -c -s add)
          echo "result=${result}" >> $GITHUB_OUTPUT

  release:
    name: Build for ${{ matrix.arch }}-${{ matrix.ref }}
    runs-on: ubuntu-latest
    needs: gather_matrix
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.gather_matrix.outputs.result) }}

    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          swap-storage: false

      - name: Setup Python 3
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install nvchecker
        run: pip3 install nvchecker

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get build path
        id: get_build_path
        run: |
          REF=${{ matrix.ref }}
          if [[ $REF == openwrt-* ]]; then
            # openwrt-22.03 -> releases/packages-22.03
            VERSION=${REF//openwrt-/}
            pkg=releases/packages-$VERSION
            log=releases/faillogs-$VERSION
          else
            # master -> snapshots/packages
            pkg=snapshots/packages
            log=snapshots/faillogs
          fi
          echo "pkg=$pkg" >> "$GITHUB_OUTPUT"
          echo "log=$log" >> "$GITHUB_OUTPUT"

      - name: Retrieve Version
        id: ver
        run: |
          cp cur_ver.json new_ver.json
          vers=$(nvcmp -c nvchecker.toml -aj)
          jq -cr 'map("\(.name)=\(.newver)") | .[]' <<< $vers >> $GITHUB_OUTPUT

      # Use go from master for 21.02/22.03/23.05
      - name: Override golang version
        if: contains(fromJSON('["openwrt-21.02", "openwrt-22.03", "openwrt-23.05"]'), matrix.ref)
        run: echo "GOLANG_COMMIT=master" >> $GITHUB_ENV

      - name: Set up OpenWrt SDK
        run: |
          REF=${{ matrix.ref }}
          ARCH=${{ matrix.arch }}
          SDK_URL="https://downloads.openwrt.org/$REF/targets/$(echo $ARCH | sed 's/_/\//')/openwrt-sdk-$REF-$(echo $ARCH | tr '_' '-')_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
          if wget -q --method=HEAD $SDK_URL; then
            wget $SDK_URL -O openwrt-sdk.tar.xz
            mkdir sdk && tar -xJf openwrt-sdk.tar.xz -C sdk --strip-components=1
          else
            echo "SDK not found for $REF and $ARCH"
            exit 1
          fi

      - name: Build Package
        uses: moetayuko/gh-action-sdk@main
        env:
          ARCH: ${{ matrix.arch }}-${{ matrix.ref }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: luci-app-themeswitch-${{ matrix.arch }}-${{ matrix.ref }}-ipk
          path: sdk/bin/packages/*/base/luci-app-themeswitch*.ipk

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create Tag
        id: create_tag
        run: |
          TODAY=$(date +'%Y-%m-%d')
          git tag $TODAY
          echo "TAG=$TODAY" >> $GITHUB_OUTPUT

      - name: Push Tag
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.MY_GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git push origin ${{ steps.create_tag.outputs.TAG }}

      - name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.create_tag.outputs.TAG }}
          release_name: Release ${{ steps.create_tag.outputs.TAG }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
